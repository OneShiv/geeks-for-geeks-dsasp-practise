import { allDivisorsOfNumber } from "./alldivisorsOfNumber";
import { allPrimeNumbers } from "./allPrimeNumbers";
import { computePowerEfficient } from "./computingpower";
import { factorialIterative, factorialRecurrsive } from "./factorial";
import { gcdEuclidean, naiveGcdSolution, optimizedEuclidiean } from "./gcd";
import { naiveLCM, optimizedLCM } from "./lcm";
import { getPrimeFactors, getPrimeFactorsOptimized } from "./primefactors";
import { isPrimeNaive, isPrimeNaiveOptimizsedFirst } from "./primeNumber";
import { trailingZerosInFactorial } from "./trailingZerosInFactorial";

console.log("------------------");
console.log("Factorial Iterative 5:", factorialIterative(5));
console.log("Factorial Recurrsive 6 :", factorialRecurrsive(6));
console.log("Trailing zeros 10 factorial", trailingZerosInFactorial(10));
console.log("------------------");
console.log("GCD for 4 and 6 is ", naiveGcdSolution(4, 6));
console.log("GCD for 13 and 7 is ", gcdEuclidean(13, 7));
console.log("GCD for 15 and 12 is opt", optimizedEuclidiean(12, 15));
console.log("------------------");
console.log("LCM of 12 and 15 is ", naiveLCM(12, 15));
console.log("LCM of 13 and 17 is ", optimizedLCM(13, 7));
console.log("------------------");
console.log(" is 7 Prime number", isPrimeNaive(7));
console.log(" is 8 Prime number", isPrimeNaive(8));
console.log(" is 47 Prime number", isPrimeNaiveOptimizsedFirst(47));
console.log(" is 49 Prime number false", isPrimeNaiveOptimizsedFirst(49));
console.log("------------------");
console.log("prime factors of 12 are ", getPrimeFactors(12));
console.log("prime factors of 450 are ", getPrimeFactors(450));
console.log("prime factors of 84 are ", getPrimeFactorsOptimized(84));
console.log("------------------");
console.log("list of divisors for 50 are", allDivisorsOfNumber(50));
console.log("list of divisors for 100 are", allDivisorsOfNumber(100));
console.log("------------------");
console.log("list of prime numbers under 100", allPrimeNumbers(100));
console.log("------------------");
console.log("compute power efficient", computePowerEfficient(4, 5));
